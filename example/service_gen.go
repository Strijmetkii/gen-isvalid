// Code generated by gen-isvalid.

package example

import (
	"errors"
)

// ExampleServiceParams is the parameter struct for creating a ExampleService
type ExampleServiceParams struct {
	Client *Client
	Cfg    *Config
}

// NewExampleService creates a new ExampleService
func NewExampleService(params ExampleServiceParams) (*ExampleService, error) {
	if err := isValidExampleServiceParams(params); err != nil {
		return nil, err
	}

	return &ExampleService{
		Client: params.Client,
		Cfg:    params.Cfg,
	}, nil
}

// isValidExampleServiceParams validates the ExampleServiceParams
func isValidExampleServiceParams(params ExampleServiceParams) error {
	var errs []error
	if params.Client == nil {
		errs = append(errs, errors.New("Client is required"))
	}
	if params.Cfg == nil {
		errs = append(errs, errors.New("Cfg is required"))
	}
	return errors.Join(errs...)
}

// AnotherServiceParams is the parameter struct for creating a AnotherService
type AnotherServiceParams struct {
	Logger  Logger
	Options Options
	Timeout int
}

// NewAnotherService creates a new AnotherService
func NewAnotherService(params AnotherServiceParams) (*AnotherService, error) {
	if err := isValidAnotherServiceParams(params); err != nil {
		return nil, err
	}

	return &AnotherService{
		Logger:  params.Logger,
		Options: params.Options,
		Timeout: params.Timeout,
	}, nil
}

// isValidAnotherServiceParams validates the AnotherServiceParams
func isValidAnotherServiceParams(params AnotherServiceParams) error {
	var errs []error
	return errors.Join(errs...)
}
