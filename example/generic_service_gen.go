// Code generated by gen-isvalid.

package example

import (
	"errors"
)

// GenericServiceParams is the parameter struct for creating a GenericService
type GenericServiceParams[T any] struct {
	Repository Repository[T]
	Logger     Logger
	Options    *GenericOptions
}

// NewGenericService creates a new GenericService
func NewGenericService[T any](params GenericServiceParams[T]) (*GenericService[T], error) {
	if err := isValidGenericServiceParams[T](params); err != nil {
		return nil, err
	}

	return &GenericService[T]{
		Repository: params.Repository,
		Logger:     params.Logger,
		Options:    params.Options,
	}, nil
}

// isValidGenericServiceParams validates the GenericServiceParams
func isValidGenericServiceParams[T any](params GenericServiceParams[T]) error {
	var errs []error
	if params.Options == nil {
		errs = append(errs, errors.New("Options is required"))
	}
	return errors.Join(errs...)
}

// CacheServiceParams is the parameter struct for creating a CacheService
type CacheServiceParams[K comparable, V any] struct {
	Store      KeyValueStore[K, V]
	Serializer Serializer[V]
	TTL        int
	MaxSize    *int
}

// NewCacheService creates a new CacheService
func NewCacheService[K comparable, V any](params CacheServiceParams[K, V]) (*CacheService[K, V], error) {
	if err := isValidCacheServiceParams[K, V](params); err != nil {
		return nil, err
	}

	return &CacheService[K, V]{
		Store:      params.Store,
		Serializer: params.Serializer,
		TTL:        params.TTL,
		MaxSize:    params.MaxSize,
	}, nil
}

// isValidCacheServiceParams validates the CacheServiceParams
func isValidCacheServiceParams[K comparable, V any](params CacheServiceParams[K, V]) error {
	var errs []error
	if params.MaxSize == nil {
		errs = append(errs, errors.New("MaxSize is required"))
	}
	return errors.Join(errs...)
}

// EventProcessorParams is the parameter struct for creating a EventProcessor
type EventProcessorParams[E Event] struct {
	Handler    EventHandler[E]
	Queue      *EventQueue[E]
	MaxWorkers int
	Config     *ProcessorConfig
}

// NewEventProcessor creates a new EventProcessor
func NewEventProcessor[E Event](params EventProcessorParams[E]) (*EventProcessor[E], error) {
	if err := isValidEventProcessorParams[E](params); err != nil {
		return nil, err
	}

	return &EventProcessor[E]{
		Handler:    params.Handler,
		Queue:      params.Queue,
		MaxWorkers: params.MaxWorkers,
		Config:     params.Config,
	}, nil
}

// isValidEventProcessorParams validates the EventProcessorParams
func isValidEventProcessorParams[E Event](params EventProcessorParams[E]) error {
	var errs []error
	if params.Queue == nil {
		errs = append(errs, errors.New("Queue is required"))
	}
	if params.Config == nil {
		errs = append(errs, errors.New("Config is required"))
	}
	return errors.Join(errs...)
}
